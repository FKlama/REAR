package de.uni.goettingen.AudioRecorderClient.Net.SSH;

import java.io.File;
import java.io.FileInputStream;

import com.jcraft.jsch.JSch;
import com.jcraft.jsch.KeyPair;

public class SSHkey {
	private static final int 	key_size	= 1024;
	private static final int	type		= KeyPair.RSA;
	private static final String	path		= "C:\\tmp\\ssh";
	private static final String	filename	= "id_rsa";
	private File privKey;
	private File pubKey;
	
	public static final String  PASSPHRASE  = "B2WX1bXaxSJ4g4E8N6zULPXBOjdFXb5fZhh0BjFx7mhUgpzig5Pi5HKEhTF1a1tC";
	
	private KeyPair kpair;
	
	@SuppressWarnings("deprecation")
	public SSHkey(JSch jsch) {
		File keyPath = new File(path);
		privKey = new File(keyPath, filename);
		pubKey  = new File(keyPath, filename + ".pub");
		
		Boolean haveKeys = false;
		
		if(checkFile(privKey)) {
			if(!checkFile(pubKey))
				privKey.delete();
			else
				haveKeys = true;
		}
		
		if(!haveKeys) {
			try {
				kpair = KeyPair.genKeyPair(jsch, type, key_size);
				kpair.setPassphrase(PASSPHRASE);
				kpair.writePrivateKey(privKey.getAbsolutePath());
				kpair.writePublicKey(pubKey.getAbsolutePath(), "Autogenerated by Exam Screenshot Tool");
				kpair.dispose();
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public File getPrivKey() {
		return privKey;
	}
	
	public File getPubKey() {
		return pubKey;
	}
	
	public String getPubKeyString() {
		String out = "";
		try {
			FileInputStream pubKeyStream = new FileInputStream(pubKey);
			byte[] buff = new byte[1024];
			pubKeyStream.read(buff, 0, 1024);
			out = new String(buff);
			pubKeyStream.close();
		}
		catch(Exception e) { 
			e.printStackTrace(); 
		}
		return out;
	}
	
	private static final Boolean checkFile(File f) {
		if(f.exists() && f.isFile() && f.canRead()) {
			return true;
		}
		return false;
	}
}
